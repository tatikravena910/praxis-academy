Pemetaan objek-relasional ( ORM , O/RM , dan alat pemetaan O/R ) dalam ilmu komputer adalah teknik pemrograman untuk mengubah data antar tipe sistem menggunakan bahasa pemrograman berorientasi objek. Ini menciptakan, pada dasarnya, sebuah " database objek virtual " yang dapat digunakan dari dalam bahasa pemrograman. Ada paket gratis dan komersial yang tersedia yang melakukan pemetaan objek-relasional, meskipun beberapa programmer memilih untuk membangun alat ORM mereka sendiri.

Dalam pemrograman berorientasi objek , tugas manajemen data bertindak pada objek yang hampir selalu bernilai non- skalar . Misalnya, pertimbangkan entri buku alamat yang mewakili satu orang bersama dengan nol atau lebih nomor telepon dan nol atau lebih alamat. Ini dapat dimodelkan dalam implementasi berorientasi objek oleh " Objek orang " dengan atribut/bidanguntuk menampung setiap item data yang terdiri dari entri: nama orang, daftar nomor telepon, dan daftar alamat. Daftar nomor telepon itu sendiri akan berisi "objek PhoneNumber" dan seterusnya. Setiap entri buku alamat tersebut diperlakukan sebagai objek tunggal oleh bahasa pemrograman (dapat direferensikan oleh variabel tunggal yang berisi pointer ke objek, misalnya). Berbagai metode dapat dikaitkan dengan objek, seperti metode untuk mengembalikan nomor telepon yang diinginkan, alamat rumah, dan sebagainya.

Sebaliknya, banyak produk database populer seperti sistem manajemen database SQL (DBMS) tidak berorientasi objek dan hanya dapat menyimpan dan memanipulasi nilai skalar seperti bilangan bulat dan string yang diatur dalam tabel . Pemrogram harus mengubah nilai objek menjadi kelompok nilai yang lebih sederhana untuk disimpan dalam database (dan mengubahnya kembali saat pengambilan), atau hanya menggunakan nilai skalar sederhana di dalam program. Pemetaan objek-relasional mengimplementasikan pendekatan pertama. [1]

Inti masalahnya adalah menerjemahkan representasi logis dari objek ke dalam bentuk atomisasi yang mampu disimpan dalam database sambil mempertahankan properti objek dan hubungannya sehingga dapat dimuat ulang sebagai objek saat dibutuhkan. Jika fungsi penyimpanan dan pengambilan ini diimplementasikan, objek dikatakan persisten .
Detail implementasi spesifik dari driver penyimpanan umumnya dibungkus dalam API dalam bahasa pemrograman yang digunakan, memperlihatkan metode untuk berinteraksi dengan media penyimpanan dengan cara yang lebih sederhana dan lebih sesuai dengan paradigma kode sekitarnya.

Berikut ini adalah contoh sederhana, yang ditulis dalam kode C# , untuk mengeksekusi kueri yang ditulis dalam SQL menggunakan mesin basis data.

var  sql  =  "PILIH id, nama_depan, nama_belakang, telepon, tanggal_lahir, jenis kelamin, usia FROM orang WHERE id = 10" ; 
var  hasil  =  konteks . orang . DariSqlRaw ( sql ). DaftarTo (); 
var  nama  =  hasil [ 0 ][ "nama_depan" ];
Sebaliknya, berikut ini menggunakan API pekerjaan ORM yang memungkinkan untuk menulis kode yang secara alami memanfaatkan fitur bahasa.

var  orang  =  repositori . GetPerson ( 10 ); 
var  namadepan  =  orang . GetFirstName ();
Kasus di atas menggunakan objek yang mewakili repositori penyimpanan dan metode objek itu. Kerangka kerja lain mungkin menyediakan kode sebagai metode statis, seperti pada contoh di bawah ini, namun metode lain mungkin tidak menerapkan sistem berorientasi objek sama sekali. Seringkali pilihan paradigma dibuat untuk kesesuaian terbaik ORM ke dalam prinsip-prinsip desain bahasa sekitarnya.

var  orang  =  Orang . Dapatkan ( 10 );
Biasanya, kerangka kerja akan mengekspos beberapa fungsi penyaringan dan kueri untuk mengakses dan memodifikasi subset dari basis penyimpanan. Kode di bawah ini menanyakan orang-orang dalam database yang nilai ID-nya '10'.

var  orang  =  Orang . Dapatkan ( Orang . Properti . Id  ==  10 );